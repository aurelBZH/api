{
  "swagger": "2.0",
  "info": {
    "title": "iReceptor Data Source API",
    "version": "2.0.5",
    "contact": {
      "name": "iReceptor Project",
      "url": "http://www.ireceptor.org/",
      "email": "breden@sfu.ca"
    },
    "description": "Documentation of Major Version 2 of the iReceptor Adaptive Immune Receptor Repertoire (AIRR) data repsoitory web service application programming interface (API). V2 of the API implements an increased level of compliance with the [Minimal Information for AIRR (MiAIRR) standard](https://github.com/airr-community/airr-standards). Learn more about [iReceptor](http://www.ireceptor.org/)\n"
  },
  "host": "ipa.ireceptor.org",
  "basePath": "/v2",
  "definitions": {
    "ireceptor_sample_summary_response": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/ireceptor_sequence_count_model"
          },
          {
            "$ref": "#/definitions/airr_summary_model"
          },
          {
            "$ref": "https://raw.githubusercontent.com/sfu-ireceptor/api/AIRR-compliance/ireceptor_summary.yaml#/ireceptor_summary_model"
          }
        ]
      }
    },
    "ireceptor_sequence_summary_response": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/ireceptor_sequence_count_model"
          },
          {
            "$ref": "#/definitions/ireceptor_filtered_sequence_count_model"
          },
          {
            "$ref": "#/definitions/airr_summary_model"
          },
          {
            "$ref": "https://raw.githubusercontent.com/sfu-ireceptor/api/AIRR-compliance/ireceptor_summary.yaml#/ireceptor_summary_model"
          }
        ]
      }
    },
    "ireceptor_sequence_response": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/v0.1.0/specs/definitions.yaml#/Rearrangement"
          },
          {
            "$ref": "https://raw.githubusercontent.com/sfu-ireceptor/api/AIRR-compliance/ireceptor_sequence.yaml#/ireceptor_sequence_annotation_model"
          }
        ]
      }
    },
    "airr_summary_model": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/v0.1.0/specs/definitions.yaml#/Study"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/v0.1.0/specs/definitions.yaml#/Subject"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/v0.1.0/specs/definitions.yaml#/Diagnosis"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/v0.1.0/specs/definitions.yaml#/Sample"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/v0.1.0/specs/definitions.yaml#/CellProcessing"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/v0.1.0/specs/definitions.yaml#/NucleicAcidProcessing"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/v0.1.0/specs/definitions.yaml#/RawSequenceData"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/v0.1.0/specs/definitions.yaml#/SoftwareProcessing"
        }
      ]
    },
    "ireceptor_sequence_count_model": {
      "type": "object",
      "properties": {
        "ir_sequence_count": {
          "type": "integer",
          "description": "Number of sequences found that met the sample search criteria for this sample",
          "example": 123456
        }
      }
    },
    "ireceptor_filtered_sequence_count_model": {
      "type": "object",
      "properties": {
        "ir_filtered_sequence_count": {
          "type": "integer",
          "description": "Number of sequences found that met the sequence search criteria for this sample",
          "example": 4321
        }
      }
    },
    "ireceptor_core_samples_parameters_model": {
      "type": "object",
      "required": [
        "ir_username"
      ],
      "properties": {
        "ir_username": {
          "type": "string",
          "description": "Username of the individual requesting access to the iReceptor repository node.\n"
        },
        "ir_lab_id": {
          "type": "string",
          "description": "e.g. 1\n"
        },
        "ir_project_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "e.g. 1\n"
        }
      }
    },
    "ireceptor_ancillary_samples_parameters_model": {
      "type": "object",
      "properties": {
        "ir_subject_age_min": {
          "type": "integer",
          "description": "e.g. 30\n"
        },
        "ir_subject_age_max": {
          "type": "integer",
          "description": "e.g. 50\n"
        }
      }
    },
    "airr_formats_sequences_parameters_model": {
      "type": "object",
      "properties": {
        "junction_length": {
          "type": "integer",
          "description": "Number of junction nucleotides in sequence_vdj (CDR3 + conserved residues)\n"
        },
        "junction_aa_length": {
          "type": "integer",
          "description": "Length of JUNCTION in amino acids"
        },
        "functional": {
          "type": "string",
          "description": "Filter for sequences that are either functional, non-functional, or both\n"
        }
      }
    },
    "ireceptor_core_sequences_parameters_model": {
      "type": "object",
      "required": [
        "ir_username"
      ],
      "properties": {
        "ir_username": {
          "type": "string",
          "description": "Username of the individual requesting access to the iReceptor repository node.\n"
        },
        "ir_project_sample_id_list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ir_data_format": {
          "description": "'csv' - vQuest based CSV (as per /v1);  'tsv' - vQuest based TSV (as per /v1 with tab delimiters instead of commas); 'airr' - AIRR Formats rearrangements TSV (as per AIRR formats rearrangements spec)"
        }
      }
    },
    "ireceptor_ancillary_sequences_parameters_model": {
      "type": "object",
      "properties": {
        "ir_show_unproductive": {
          "type": "string",
          "description": "By default, only productive sequences are returned. In order to return unproductive sequences, set this parameter to \"T\""
        }
      }
    }
  },
  "parameters": {
    "ir_username": {
      "name": "ir_username",
      "in": "query",
      "description": "Username of the individual requesting access to the iReceptor repository node. If the iReceptor repository is a public repository, then this parameter is not required. If the repository is not public then the username must be supplied and the repository will determine the access for that user for that repository.\n",
      "required": false,
      "type": "string"
    },
    "ir_username_form": {
      "name": "ir_username",
      "in": "formData",
      "description": "Username of the individual requesting access to the iReceptor repository node. If the iReceptor repository is a public repository, then this parameter is not required. If the repository is not public then the username must be supplied and the repository will determine the access for that user for that repository.\n",
      "required": false,
      "type": "string"
    },
    "study_id": {
      "name": "study_id",
      "type": "string",
      "in": "query"
    },
    "study_id_form": {
      "name": "study_id",
      "type": "string",
      "in": "formData"
    },
    "study_title": {
      "name": "study_title",
      "type": "string",
      "in": "query"
    },
    "study_title_form": {
      "name": "study_title",
      "type": "string",
      "in": "formData"
    },
    "study_description": {
      "name": "study_description",
      "type": "string",
      "in": "query"
    },
    "study_description_form": {
      "name": "study_description",
      "type": "string",
      "in": "formData"
    },
    "lab_name": {
      "name": "lab_name",
      "type": "string",
      "in": "query"
    },
    "lab_name_form": {
      "name": "lab_name",
      "type": "string",
      "in": "formData"
    },
    "subject_id": {
      "name": "subject_id",
      "type": "string",
      "in": "query"
    },
    "subject_id_form": {
      "name": "subject_id",
      "type": "string",
      "in": "formData"
    },
    "organism": {
      "name": "organism",
      "type": "string",
      "in": "query"
    },
    "organism_form": {
      "name": "organism",
      "type": "string",
      "in": "formData"
    },
    "sex": {
      "name": "sex",
      "type": "string",
      "in": "query"
    },
    "sex_form": {
      "name": "sex",
      "type": "string",
      "in": "formData"
    },
    "ethnicity": {
      "name": "ethnicity",
      "type": "array",
      "items": {
        "type": "string"
      },
      "in": "query"
    },
    "ethnicity_form": {
      "name": "ethnicity",
      "type": "array",
      "items": {
        "type": "string"
      },
      "in": "formData"
    },
    "study_group_description": {
      "name": "study_group_description",
      "type": "array",
      "items": {
        "type": "string"
      },
      "in": "query"
    },
    "study_group_description_form": {
      "name": "study_group_description",
      "type": "array",
      "items": {
        "type": "string"
      },
      "in": "formData"
    },
    "sample_id": {
      "name": "sample_id",
      "type": "string",
      "in": "query"
    },
    "sample_id_form": {
      "name": "sample_id",
      "type": "string",
      "in": "formData"
    },
    "tissue": {
      "name": "tissue",
      "type": "array",
      "items": {
        "type": "string"
      },
      "in": "query"
    },
    "tissue_form": {
      "name": "tissue",
      "type": "array",
      "items": {
        "type": "string"
      },
      "in": "formData"
    },
    "disease_state_sample": {
      "name": "disease_state_sample",
      "type": "string",
      "in": "query"
    },
    "disease_state_sample_form": {
      "name": "disease_state_sample",
      "type": "string",
      "in": "formData"
    },
    "cell_subset": {
      "name": "cell_subset",
      "type": "array",
      "items": {
        "type": "string"
      },
      "in": "query"
    },
    "cell_subset_form": {
      "name": "cell_subset",
      "type": "array",
      "items": {
        "type": "string"
      },
      "in": "formData"
    },
    "cell_phenotype": {
      "name": "cell_phenotype",
      "type": "string",
      "in": "query"
    },
    "cell_phenotype_form": {
      "name": "cell_phenotype",
      "type": "string",
      "in": "formData"
    },
    "template_class": {
      "name": "template_class",
      "type": "array",
      "items": {
        "type": "string"
      },
      "in": "query"
    },
    "template_class_form": {
      "name": "template_class",
      "type": "array",
      "items": {
        "type": "string"
      },
      "in": "formData"
    },
    "sequencing_platform": {
      "name": "sequencing_platform",
      "type": "string",
      "in": "query"
    },
    "sequencing_platform_form": {
      "name": "sequencing_platform",
      "type": "string",
      "in": "formData"
    },
    "ir_project_id": {
      "name": "ir_project_id",
      "in": "query",
      "description": "e.g. 1\n",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ir_project_id_form": {
      "name": "ir_project_id",
      "in": "formData",
      "description": "e.g. 1\n",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ir_subject_age_min": {
      "name": "ir_subject_age_min",
      "in": "query",
      "description": "e.g. 10\n",
      "required": false,
      "type": "integer"
    },
    "ir_subject_age_min_form": {
      "name": "ir_subject_age_min",
      "in": "formData",
      "description": "e.g. 10\n",
      "required": false,
      "type": "integer"
    },
    "ir_subject_age_max": {
      "name": "ir_subject_age_max",
      "in": "query",
      "description": "e.g. 12\n",
      "required": false,
      "type": "integer"
    },
    "ir_subject_age_max_form": {
      "name": "ir_subject_age_max",
      "in": "formData",
      "description": "e.g. 12\n",
      "required": false,
      "type": "integer"
    },
    "germline_database": {
      "name": "germline_database",
      "in": "query",
      "type": "string",
      "description": "Source of germline V(D)J segments, with version number or date accessed (e.g. IMGT/V-QUEST Release 201736-4 (7 September 2017)) (AIRR)\n"
    },
    "germline_database_form": {
      "name": "germline_database",
      "in": "formData",
      "type": "string",
      "description": "Source of germline V(D)J segments, with version number or date accessed (e.g. IMGT/V-QUEST Release 201736-4 (7 September 2017)) (AIRR)\n"
    },
    "cell_index": {
      "name": "cell_index",
      "in": "query",
      "type": "integer",
      "description": "Cell Index (UID linking sequences from the same cell) (AIRR)\n"
    },
    "cell_index_form": {
      "name": "cell_index",
      "in": "formData",
      "type": "integer",
      "description": "Cell Index (UID linking sequences from the same cell) (AIRR)\n"
    },
    "v_call": {
      "name": "v_call",
      "in": "query",
      "type": "string",
      "description": "V gene with allele (e.g. IGHV4-59*01) (AIRR)\n"
    },
    "v_call_form": {
      "name": "v_call",
      "in": "formData",
      "type": "string",
      "description": "V gene with allele (e.g. IGHV4-59*01) (AIRR)\n"
    },
    "d_call": {
      "name": "d_call",
      "in": "query",
      "type": "string",
      "description": "D gene with allele (e.g. IGHD3-10*01) (AIRR)\n"
    },
    "d_call_form": {
      "name": "d_call",
      "in": "formData",
      "type": "string",
      "description": "D gene with allele (e.g. IGHD3-10*01) (AIRR)\n"
    },
    "j_call": {
      "name": "j_call",
      "in": "query",
      "type": "string",
      "description": "J gene with allele (e.g. IGHJ4*02) (AIRR)\n"
    },
    "j_call_form": {
      "name": "j_call",
      "in": "formData",
      "type": "string",
      "description": "J gene with allele (e.g. IGHJ4*02) (AIRR)\n"
    },
    "c_call": {
      "name": "c_call",
      "in": "query",
      "type": "string",
      "description": "C region with allele (AIRR)                     \n"
    },
    "c_call_form": {
      "name": "c_call",
      "in": "formData",
      "type": "string",
      "description": "C region with allele (AIRR)  \n"
    },
    "junction_nt": {
      "name": "junction_nt",
      "in": "query",
      "type": "string",
      "description": "JUNCTION nucleotide sequence (Sequence of the CDR3 region + conserved residues (nucleotide)) (AIRR)\n"
    },
    "junction_nt_form": {
      "name": "junction_nt",
      "in": "formData",
      "type": "string",
      "description": "JUNCTION nucleotide sequence (Sequence of the CDR3 region + conserved residues (nucleotide)) (AIRR)\n"
    },
    "junction_aa": {
      "name": "junction_aa",
      "in": "query",
      "type": "string",
      "description": "JUNCTION amino acid sequence (Sequence of the CDR3 region + conserved residues (amino acid)) (AIRR)\n"
    },
    "junction_aa_form": {
      "name": "junction_aa",
      "in": "formData",
      "type": "string",
      "description": "JUNCTION amino acid sequence (Sequence of the CDR3 region + conserved residues (amino acid)) (AIRR)\n"
    },
    "duplicate_count": {
      "name": "duplicate_count",
      "in": "query",
      "type": "integer",
      "description": "Number of times the sequence has been duplicated in a file (AIRR)\n"
    },
    "duplicate_count_form": {
      "name": "duplicate_count",
      "in": "formData",
      "type": "integer",
      "description": "Number of times the sequence has been duplicated in a file (AIRR)\n"
    },
    "junction_length": {
      "name": "junction_length",
      "in": "query",
      "type": "integer",
      "description": "Number of junction nucleotides in sequence_vdj (CDR3 + conserved residues)\n"
    },
    "junction_length_form": {
      "name": "junction_length",
      "in": "formData",
      "type": "integer",
      "description": "Number of junction nucleotides in sequence_vdj (CDR3 + conserved residues)\n"
    },
    "junction_aa_length": {
      "name": "junction_aa_length",
      "in": "query",
      "description": "Length of JUNCTION (CDR3 + conserved residues) in amino acids",
      "required": false,
      "type": "integer"
    },
    "junction_aa_length_form": {
      "name": "junction_aa_length",
      "in": "formData",
      "description": "Length of JUNCTION (CDR3 + conserved residues) in amino acids",
      "required": false,
      "type": "integer"
    },
    "functional": {
      "name": "functional",
      "in": "query",
      "type": "boolean",
      "default": true,
      "description": "Filter for sequences that are either functional, non-functional, or both\n"
    },
    "functional_form": {
      "name": "functional",
      "in": "formData",
      "type": "boolean",
      "default": true,
      "description": "Filter for sequences that are either functional, non-functional, or both\n"
    },
    "ir_sample_id_list": {
      "name": "ir_project_sample_id_list",
      "in": "query",
      "description": "List of unique identifiers (specific to the repository) that identify the samples to apply the query to.\n",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ir_sample_id_list_form": {
      "name": "ir_project_sample_id_list",
      "in": "formData",
      "description": "List of unique identifiers (specific to the repository) that identify the samples to apply the query to.\n",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "ir_data_format": {
      "name": "ir_data_format",
      "in": "query",
      "description": "Data format to return the sequence data in, one of:</br> 'csv' - vQuest based CSV (as per /v1)(default)</br> 'tsv' - vQuest based TSV (as per /v1 with tab delimiters instead of commas);</br> 'airr' - AIRR Formats rearrangements TSV (as per AIRR formats rearrangements spec)",
      "required": false,
      "type": "string"
    },
    "ir_data_format_form": {
      "name": "ir_data_format",
      "in": "formData",
      "description": "Data format to return the sequence data in, one of:</br> 'csv' - vQuest based CSV (as per /v1)(default)</br> 'tsv' - vQuest based TSV (as per /v1 with tab delimiters instead of commas);</br> 'airr' - AIRR Formats rearrangements TSV (as per AIRR formats rearrangements spec)",
      "required": false,
      "type": "string"
    },
    "ir_show_unproductive": {
      "name": "ir_show_unproductive",
      "in": "query",
      "description": "By default, only productive sequences are returned. In order to return unproductive sequences, set this parameter to \"T\"\n",
      "required": false,
      "type": "array",
      "items": {
        "type": "boolean"
      }
    },
    "ir_show_unproductive_form": {
      "name": "ir_show_unproductive",
      "in": "formData",
      "description": "By default, only productive sequences are returned. In order to return unproductive sequences, set this parameter to \"T\"\n",
      "required": false,
      "type": "array",
      "items": {
        "type": "boolean"
      }
    },
    "ir_junction_nt_length": {
      "name": "ir_junction_nt_length",
      "in": "query",
      "description": "Length of JUNCTION (CDR3 + conserved residues) in nucleotide base pairs (iReceptor)",
      "required": false,
      "type": "integer"
    },
    "ir_junction_nt_length_form": {
      "name": "ir_junction_nt_length",
      "in": "formData",
      "description": "Length of JUNCTION (CDR3 + conserved residues) in nucleotide base pairs (iReceptor)",
      "required": false,
      "type": "integer"
    }
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/x-www-form-urlencoded"
  ],
  "tags": [
    {
      "name": "info",
      "description": "Service information"
    },
    {
      "name": "samples",
      "description": "Queries for samples"
    },
    {
      "name": "sequences",
      "description": "Queries for sequences"
    },
    {
      "name": "clones",
      "description": "Queries for clones"
    }
  ],
  "paths": {
    "/": {
      "x-swagger-router-controller": "status",
      "get": {
        "description": "Service heartbeat.\n",
        "consumes": [
          "application/octet-stream"
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "Success.\n",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/info": {
      "x-swagger-router-controller": "status",
      "get": {
        "description": "Service information.\n",
        "tags": [
          "info"
        ],
        "consumes": [
          "application/octet-stream"
        ],
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "Success.\n",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/swagger": {
      "x-swagger-pipe": "swagger_raw"
    },
    "/samples": {
      "x-swagger-router-controller": "samples",
      "get": {
        "description": "This service returns metadata about samples, including higher-level meta-data around the study, subject, diagnosis, and sample processing (data relevant to MiAIRR data classes 1 through 3). The data returned is filtered based on the parameters provided.\nA successful call returns a json list with a sample level summary of each sample including a summary count of the number of sequences found for that sample.\n",
        "tags": [
          "samples"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ir_username"
          },
          {
            "$ref": "#/parameters/ir_project_id"
          },
          {
            "$ref": "#/parameters/study_id"
          },
          {
            "$ref": "#/parameters/study_title"
          },
          {
            "$ref": "#/parameters/study_description"
          },
          {
            "$ref": "#/parameters/lab_name"
          },
          {
            "$ref": "#/parameters/subject_id"
          },
          {
            "$ref": "#/parameters/organism"
          },
          {
            "$ref": "#/parameters/sex"
          },
          {
            "$ref": "#/parameters/ethnicity"
          },
          {
            "$ref": "#/parameters/study_group_description"
          },
          {
            "$ref": "#/parameters/sample_id"
          },
          {
            "$ref": "#/parameters/tissue"
          },
          {
            "$ref": "#/parameters/disease_state_sample"
          },
          {
            "$ref": "#/parameters/cell_subset"
          },
          {
            "$ref": "#/parameters/cell_phenotype"
          },
          {
            "$ref": "#/parameters/template_class"
          },
          {
            "$ref": "#/parameters/sequencing_platform"
          },
          {
            "$ref": "#/parameters/ir_subject_age_min"
          },
          {
            "$ref": "#/parameters/ir_subject_age_max"
          }
        ],
        "operationId": "getSamples",
        "responses": {
          "200": {
            "description": "A successful call returns an array of sample summary metadata for\neach sample that meets the search criteria. The metadata returned\nfor each sample includes the number of sequences found for that sample\nas well as the study/subject/sample data for that sample. The metadata\nfor each sample in the response contains a set of AIRR compliant data\nas well as repository specific data that is required to query the\nrepository about those types of elements. \n",
            "schema": {
              "$ref": "#/definitions/ireceptor_sample_summary_response"
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      },
      "post": {
        "description": "This service returns metadata about samples, including higher-level meta-data around the study, subject, diagnosis, and sample processing (data relevant to MiAIRR data classes 1 through 3). The data returned is filtered based on the parameters provided.\nA successful call returns a json list with a sample level summary of each sample including a summary count of the number of sequences found for that sample.\n",
        "tags": [
          "samples"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ir_username_form"
          },
          {
            "$ref": "#/parameters/ir_project_id_form"
          },
          {
            "$ref": "#/parameters/study_id_form"
          },
          {
            "$ref": "#/parameters/study_title_form"
          },
          {
            "$ref": "#/parameters/study_description_form"
          },
          {
            "$ref": "#/parameters/lab_name_form"
          },
          {
            "$ref": "#/parameters/subject_id_form"
          },
          {
            "$ref": "#/parameters/organism_form"
          },
          {
            "$ref": "#/parameters/sex_form"
          },
          {
            "$ref": "#/parameters/ethnicity_form"
          },
          {
            "$ref": "#/parameters/study_group_description_form"
          },
          {
            "$ref": "#/parameters/sample_id_form"
          },
          {
            "$ref": "#/parameters/tissue_form"
          },
          {
            "$ref": "#/parameters/disease_state_sample_form"
          },
          {
            "$ref": "#/parameters/cell_subset_form"
          },
          {
            "$ref": "#/parameters/cell_phenotype_form"
          },
          {
            "$ref": "#/parameters/template_class_form"
          },
          {
            "$ref": "#/parameters/sequencing_platform_form"
          },
          {
            "$ref": "#/parameters/ir_subject_age_min_form"
          },
          {
            "$ref": "#/parameters/ir_subject_age_max_form"
          }
        ],
        "operationId": "postSamples",
        "responses": {
          "200": {
            "description": "A successful call returns an array of sample summary metadata for each sample that meets the search criteria. The metadata returned for each sample includes the number of sequences found for that sample as well as the study/subject/sample data for that sample. The metadata for each sample in the response contains a set of AIRR compliant data as well as repository specific data that is required to query the repository about those types of elements. \n",
            "schema": {
              "$ref": "#/definitions/ireceptor_sample_summary_response"
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      }
    },
    "/sequences_summary": {
      "x-swagger-router-controller": "sequences",
      "get": {
        "description": "This service returns a summary of sequences that matches the GET provided filter. \"ir_username\" parameter refers to user requesting access to the repository.\n",
        "tags": [
          "sequences"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ir_username"
          },
          {
            "$ref": "#/parameters/ir_sample_id_list"
          },
          {
            "$ref": "#/parameters/v_call"
          },
          {
            "$ref": "#/parameters/d_call"
          },
          {
            "$ref": "#/parameters/j_call"
          },
          {
            "$ref": "#/parameters/junction_aa"
          },
          {
            "$ref": "#/parameters/junction_length"
          },
          {
            "$ref": "#/parameters/junction_aa_length"
          },
          {
            "$ref": "#/parameters/functional"
          },
          {
            "$ref": "#/parameters/ir_show_unproductive"
          }
        ],
        "operationId": "getSequenceSummary",
        "responses": {
          "200": {
            "description": "A successful call returns two components, an aggregated summary of the data that satisfies the query and an example subset of the annotated sequence data that meets the query criteria. The aggreated data returns a summary similar to that returned by the /samples API entry point, returning the number of sequences and the study/subject/sample meta-data for each sample. The example subset of sequence data that is returned is a small subset of annotated sequences that met the search criteria. The number of sequences returned is given in the \"num_sequences\" paramter to the query and the format in which the sequences are returned is provided by the \"sequence_format\" parameter to the query.\n",
            "schema": {
              "type": "object",
              "properties": {
                "summary": {
                  "$ref": "#/definitions/ireceptor_sequence_summary_response"
                },
                "items": {
                  "$ref": "#/definitions/ireceptor_sequence_response"
                }
              }
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      },
      "post": {
        "description": "This service returns a summary of sequences that matches the POST provided filter. \"ir_username\" parameter refers to user requesting access to the repository.\n",
        "tags": [
          "sequences"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ir_username_form"
          },
          {
            "$ref": "#/parameters/ir_sample_id_list_form"
          },
          {
            "$ref": "#/parameters/v_call_form"
          },
          {
            "$ref": "#/parameters/d_call_form"
          },
          {
            "$ref": "#/parameters/j_call_form"
          },
          {
            "$ref": "#/parameters/junction_aa_form"
          },
          {
            "$ref": "#/parameters/junction_length_form"
          },
          {
            "$ref": "#/parameters/junction_aa_length_form"
          },
          {
            "$ref": "#/parameters/functional_form"
          },
          {
            "$ref": "#/parameters/ir_show_unproductive_form"
          }
        ],
        "operationId": "postSequenceSummary",
        "responses": {
          "200": {
            "description": "A successful call returns two components, an aggregated summary of the data that satisfies the query and an example subset of the annotated sequence data that meets the query criteria. The aggreated data returns a summary similar to that returned by the /samples API entry point, returning the number of sequences and the study/subject/sample meta-data for each sample. The example subset of sequence data that is returned is a small subset of annotated sequences that met the search criteria. The number of sequences returned is given in the \"num_sequences\" paramter to the query and the format in which the sequences are returned is provided by the \"sequence_format\" parameter to the query.\n",
            "schema": {
              "type": "object",
              "properties": {
                "summary": {
                  "$ref": "#/definitions/ireceptor_sequence_summary_response"
                },
                "items": {
                  "$ref": "#/definitions/ireceptor_sequence_response"
                }
              }
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      }
    },
    "/sequences_data": {
      "x-swagger-router-controller": "sequences",
      "get": {
        "description": "This service returns the annotation data that matches the GET provided filter. \"username\" parameter refers to external_users table, and it requires the array of \"project_sample_id\", which limits which samples the sequences will be taken from. Other parameters are optional, and refer to the sequence_md_view view in iReceptor database.\n",
        "tags": [
          "sequences"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ir_username"
          },
          {
            "$ref": "#/parameters/ir_sample_id_list"
          },
          {
            "$ref": "#/parameters/ir_data_format"
          },
          {
            "$ref": "#/parameters/v_call"
          },
          {
            "$ref": "#/parameters/d_call"
          },
          {
            "$ref": "#/parameters/j_call"
          },
          {
            "$ref": "#/parameters/junction_aa"
          },
          {
            "$ref": "#/parameters/junction_length"
          },
          {
            "$ref": "#/parameters/junction_aa_length"
          },
          {
            "$ref": "#/parameters/functional"
          },
          {
            "$ref": "#/parameters/ir_show_unproductive"
          }
        ],
        "operationId": "getSequenceData",
        "responses": {
          "200": {
            "description": "A successful call returns an array of sequence data. Optional \"format\" parameter determines the output format. Default is a JSON response, limited to top 50 results. If \"format\" is set to \"csv\", it will return all the matching sequence annotations, in addition to sample information and annotation tool information, in a comma-separated format; \"tsv\" returns a tab-delimited outputs;  \"airr\" returns AIRR minimal standards encoded tab-delimited outputs.\n",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      },
      "post": {
        "description": "This service returns the annotation data that matches the POST provided filter. \"username\" parameter refers to external_users table, and it requires the array of \"project_sample_id\", which limits which samples the sequences will be taken from. Other parameters are optional, and refer to the sequence_md_view view in iReceptor database. A full list of possible parameters is in the iReceptorAPI-sequenceMetadata file\n",
        "tags": [
          "sequences"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ir_username_form"
          },
          {
            "$ref": "#/parameters/ir_sample_id_list_form"
          },
          {
            "$ref": "#/parameters/ir_data_format_form"
          },
          {
            "$ref": "#/parameters/v_call_form"
          },
          {
            "$ref": "#/parameters/d_call_form"
          },
          {
            "$ref": "#/parameters/j_call_form"
          },
          {
            "$ref": "#/parameters/junction_aa_form"
          },
          {
            "$ref": "#/parameters/junction_length_form"
          },
          {
            "$ref": "#/parameters/junction_aa_length_form"
          },
          {
            "$ref": "#/parameters/functional_form"
          },
          {
            "$ref": "#/parameters/ir_show_unproductive_form"
          }
        ],
        "operationId": "postSequenceData",
        "responses": {
          "200": {
            "description": "A successful call returns an array of sequence data. Optional \"format\" parameter determines the output format. Default is a JSON response, limited to top 50 results. If \"format\" is set to \"csv\", it will return all the matching sequence annotations, in addition to sample information and annotation tool information, in a comma-separated format; \"tsv\" returns a tab-delimited outputs;  \"airr\" returns AIRR minimal standards encoded tab-delimited outputs.\n",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      }
    },
    "/clones_summary": {
      "x-swagger-router-controller": "clones",
      "post": {
        "description": "This service returns a summary of sequence clones that match the GET provided filter. \"username\" parameter refers to external_users table.\n",
        "tags": [
          "clones"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ir_username_form"
          },
          {
            "$ref": "#/parameters/ir_sample_id_list_form"
          },
          {
            "$ref": "#/parameters/v_call_form"
          },
          {
            "$ref": "#/parameters/d_call_form"
          },
          {
            "$ref": "#/parameters/j_call_form"
          },
          {
            "$ref": "#/parameters/junction_aa_form"
          },
          {
            "$ref": "#/parameters/junction_length_form"
          },
          {
            "$ref": "#/parameters/junction_aa_length_form"
          },
          {
            "$ref": "#/parameters/functional_form"
          },
          {
            "$ref": "#/parameters/ir_show_unproductive_form"
          }
        ],
        "operationId": "postCloneSummary",
        "responses": {
          "200": {
            "description": "A successful call returns an summary of clone data as an array of 'category' = count pairs in which the 'category' are string tags of parameters of interest from a controlled vocabulary term set.\n",
            "schema": {
              "type": "object",
              "properties": {
                "summary": {
                  "$ref": "#/definitions/ireceptor_sequence_summary_response"
                },
                "items": {
                  "$ref": "#/definitions/ireceptor_sequence_response"
                }
              }
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      }
    },
    "/clones_data": {
      "x-swagger-router-controller": "clones",
      "post": {
        "description": "This service returns a list of clones that matches the GET provided filter. \"username\" parameter refers to external_users table.\n",
        "tags": [
          "clones"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/ir_username_form"
          },
          {
            "$ref": "#/parameters/ir_sample_id_list_form"
          },
          {
            "$ref": "#/parameters/ir_data_format_form"
          },
          {
            "$ref": "#/parameters/v_call_form"
          },
          {
            "$ref": "#/parameters/d_call_form"
          },
          {
            "$ref": "#/parameters/j_call_form"
          },
          {
            "$ref": "#/parameters/junction_aa_form"
          },
          {
            "$ref": "#/parameters/junction_length_form"
          },
          {
            "$ref": "#/parameters/junction_aa_length_form"
          },
          {
            "$ref": "#/parameters/functional_form"
          },
          {
            "$ref": "#/parameters/ir_show_unproductive_form"
          }
        ],
        "operationId": "postCloneData",
        "responses": {
          "200": {
            "description": "A successful call returns an array of sequence data. Optional \"output\" parameter determines the output format. Default is a JSON response, limited to top 50 results. If \"output\" is set to \"csv\", it will return all the matching sequence annotations, in addition to sample information and annotation tool information, in a comma-separated format. \n",
            "schema": {
              "$ref": "#/definitions/ireceptor_sequence_response"
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      }
    }
  }
}
