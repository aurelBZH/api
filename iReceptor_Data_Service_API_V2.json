{
  "swagger": "2.0",
  "info": {
    "title": "iReceptor Data Source API",
    "version": "2.0.5",
    "contact": {
      "name": "iReceptor Project",
      "url": "http://www.ireceptor.org/",
      "email": "breden@sfu.ca"
    },
    "description": "Documentation of Major Version 2 of the iReceptor Adaptive Immune Receptor Repertoire (AIRR) data repsoitory web service application programming interface (API). V2 of the API implements an increased level of compliance with the [Minimal Information for AIRR (MiAIRR) standard](https://github.com/airr-community/airr-standards). Learn more about [iReceptor](http://www.ireceptor.org/)\n"
  },
  "host": "ipa.ireceptor.org",
  "basePath": "/v2",
  "definitions": {
    "ireceptor_summary_response": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/ireceptor_sequence_count_model"
          },
          {
            "$ref": "#/definitions/airr_summary_model"
          },
          {
            "$ref": "#/definitions/ireceptor_summary_model"
          }
        ]
      }
    },
    "ireceptor_sequence_response": {
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/airr_sequence_annotation_model"
          },
          {
            "$ref": "#/definitions/ireceptor_sequence_annotation_model"
          }
        ]
      }
    },
    "airr_summary_model": {
      "allOf": [
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/master/specs/definitions.yaml#/Study"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/master/specs/definitions.yaml#/Subject"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/master/specs/definitions.yaml#/Diagnosis"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/master/specs/definitions.yaml#/Sample"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/master/specs/definitions.yaml#/CellProcessing"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/master/specs/definitions.yaml#/NucleicAcidProcessing"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/master/specs/definitions.yaml#/RawSequenceData"
        },
        {
          "$ref": "https://raw.githubusercontent.com/airr-community/airr-standards/master/specs/definitions.yaml#/SoftwareProcessing"
        }
      ]
    },
    "ireceptor_sequence_count_model": {
      "type": "object",
      "properties": {
        "sequence_count": {
          "type": "integer",
          "example": 123456
        }
      }
    },
    "ireceptor_summary_model": {
      "type": "object",
      "properties": {
        "ir_subject_age": {
          "type": "integer",
          "description": "e.g. 1\n"
        },
        "ir_sra_run_id": {
          "type": "string",
          "description": ""
        },
        "ir_marker_1": {
          "type": "string",
          "description": "e.g. CR19\n"
        },
        "ir_marker_2": {
          "type": "string",
          "description": "e.g. CR20\n"
        },
        "ir_marker_3": {
          "type": "string",
          "description": "e.g. CR21\n"
        },
        "ir_marker_4": {
          "type": "string",
          "description": "e.g. null\n"
        },
        "ir_marker_5": {
          "type": "string",
          "description": "e.g. null\n"
        },
        "ir_marker_6": {
          "type": "string",
          "description": "e.g. null\n"
        },
        "ir_subject_id": {
          "type": "integer",
          "description": "Identifier used internally by the repository to identify a subject.\n"
        },
        "ir_project_id": {
          "type": "integer",
          "description": "Identifier used internally by the repository to identify a project.\n"
        },
        "ir_project_parent_id": {
          "type": "integer",
          "description": "Identifier used internally by the repository to identify a parent/child relationship between this project and its parent project.\n"
        },
        "ir_lab_id": {
          "type": "integer",
          "description": "Identifier used internally by the repository to identify a lab.\n"
        },
        "ir_case_control_id": {
          "type": "integer",
          "description": "Identifier used internally by the repository to identify an element in the case_control table.\n"
        },
        "ir_sample_id": {
          "type": "integer",
          "description": "Identifier used internally by the repository to identify a sample.\n"
        },
        "ir_dna_id": {
          "type": "integer",
          "description": "Identifier used internally by the repository to identify a DNA type.\n"
        },
        "ir_project_sample_id": {
          "type": "integer",
          "description": "Identifier used internally by the repository to identify an association a project with a sample.\n"
        },
        "ir_sample_subject_id": {
          "type": "integer",
          "description": "Identifier used internally by the repository to identify an association between a sample and a subject.\n"
        },
        "ir_sample_source_id": {
          "type": "integer",
          "description": "Identifier used internally by the repository to identify an association between a sample and a sample source.\n"
        }
      }
    },
    "airr_sequence_annotation_model": {
      "type": "object",
      "properties": {
        "germline_database": {
          "type": "string",
          "description": "Source of germline V(D)J segments, with version number or date accessed (e.g. IMGT/V-QUEST Release 201736-4 (7 September 2017)) (AIRR)\n"
        },
        "cell_index": {
          "type": "integer",
          "description": "Cell Index (UID linking sequences from the same cell) (AIRR)\n"
        },
        "v_allele": {
          "type": "string",
          "description": "V gene with allele (e.g. IGHV4-59*01) (AIRR)\n"
        },
        "d_allele": {
          "type": "string",
          "description": "D gene with allele (e.g. IGHD3-10*01) (AIRR)\n"
        },
        "j_allele": {
          "type": "string",
          "description": "J gene with allele (e.g. IGHJ4*02) (AIRR)\n"
        },
        "c_allele": {
          "type": "string",
          "description": "C region with allele (AIRR)                     \n"
        },
        "junction_nt": {
          "type": "string",
          "description": "JUNCTION nucleotide sequence (Sequence of the CDR3 region (nucleotide)) (AIRR)\n"
        },
        "junction_aa": {
          "type": "string",
          "description": "JUNCTION amino acid sequence (Sequence of the CDR3 region (amino acid)) (AIRR)\n"
        },
        "duplicate_count": {
          "type": "integer",
          "description": "Number of times the sequence has been duplicated in a file (AIRR)\n"
        }
      }
    },
    "extended_sequence_model": {
      "allOf": [
        {
          "$ref": "#/definitions/airr_sequence_annotation_model"
        },
        {
          "type": "object",
          "properties": {
            "an_extended_model_element": {
              "type": "string",
              "description": "This does not seem to extend the model, it replaces it!"
            }
          }
        }
      ]
    },
    "ireceptor_sequence_annotation_model": {
      "type": "object",
      "properties": {
        "seq_id": {
          "type": "integer",
          "description": "e.g. 1\n"
        },
        "seq_name": {
          "type": "string"
        },
        "project_sample_id": {
          "type": "integer",
          "description": "e.g. 6\n"
        },
        "id": {
          "type": "integer",
          "description": "e.g. 1\n"
        },
        "sequence_id": {
          "type": "integer",
          "description": "e.g. 1\n"
        },
        "vgene_string": {
          "type": "string",
          "description": "e.g IGHV4-59*01 or  IGHV4-59*07\n"
        },
        "vgene_family": {
          "type": "string",
          "description": "e.g. IGHV4\n"
        },
        "vgene_gene": {
          "type": "string",
          "description": "e.g. IGHV4-59\n"
        },
        "dgene_string": {
          "type": "string",
          "description": "e.g. Homsap IGHD3-10*01 F\n"
        },
        "dgene_family": {
          "type": "string",
          "description": "e.g. IGHD3\n"
        },
        "dgene_gene": {
          "type": "string",
          "description": "e.g. IGHD3-10\n"
        },
        "jgene_string": {
          "type": "string",
          "description": "e.g. Homsap IGHJ4*02 F\n"
        },
        "jgene_family": {
          "type": "string",
          "description": "e.g. IGHJ4\n"
        },
        "jgene_gene": {
          "type": "string",
          "description": "e.g. IGHJ4\n"
        },
        "functionality": {
          "type": "string",
          "description": "e.g. productive\n"
        },
        "functionality_comment": {
          "type": "string",
          "description": "e.g. \"\"\n"
        },
        "orientation": {
          "type": "string",
          "description": "e.g. +\n"
        },
        "vgene_score": {
          "type": "integer",
          "description": "e.g. 1127\n"
        },
        "vgene_probability": {
          "type": "integer",
          "description": "e.g. 95\n"
        },
        "dregion_reading_frame": {
          "type": "integer",
          "description": "e.g. 2\n"
        },
        "cdr1_length": {
          "type": "integer",
          "description": "e.g. 8\n"
        },
        "cdr2_length": {
          "type": "integer",
          "description": "e.g. 7\n"
        },
        "cdr3_length": {
          "type": "integer",
          "description": "e.g. 13\n"
        },
        "vdjregion_sequence_nt": {
          "type": "string",
          "description": "vdj region nucleotide sequence\n"
        },
        "vjregion_sequence_nt": {
          "type": "string",
          "description": "vj region nucleotide sequence\n"
        },
        "djregion_sequence_nt": {
          "type": "string",
          "description": "dj region nucleotide sequence\n"
        },
        "vregion_sequence_nt": {
          "type": "string",
          "description": "v region nucleotide sequence\n"
        },
        "dregion_sequence_nt": {
          "type": "string",
          "description": "d region nucleotide sequence\n"
        },
        "jregion_sequence_nt": {
          "type": "string",
          "description": "j region nucleotide sequence\n"
        },
        "fr1region_sequence_nt": {
          "type": "string",
          "description": "fr1 region nucleotide sequence\n"
        },
        "fr2region_sequence_nt": {
          "type": "string",
          "description": "fr2 region nucleotide sequence\n"
        },
        "fr3region_sequence_nt": {
          "type": "string",
          "description": "fr3 region nucleotide sequence\n"
        },
        "fr4region_sequence_nt": {
          "type": "string",
          "description": "fr4 region nucleotide sequence\n"
        },
        "cdr1region_sequence_nt": {
          "type": "string",
          "description": "cdr1 region nucleotide sequence\n"
        },
        "cdr2region_sequence_nt": {
          "type": "string",
          "description": "cdr2 region nucleotide sequence\n"
        },
        "cdr3region_sequence_nt": {
          "type": "string",
          "description": "cdr3 region nucleotide sequence\n"
        },
        "vdjregion_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped vdj region nucleotide sequence\n"
        },
        "vjregion_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped vj region nucleotide sequence\n"
        },
        "djregion_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped dj region nucleotide sequence\n"
        },
        "vregion_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped v region nucleotide sequence\n"
        },
        "dregion_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped d region nucleotide sequence\n"
        },
        "jregion_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped j region nucleotide sequence\n"
        },
        "fr1region_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped fr1 region nucleotide sequence\n"
        },
        "fr2region_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped fr2 region nucleotide sequence\n"
        },
        "fr3region_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped fr3 region nucleotide sequence\n"
        },
        "fr4region_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped fr4 region nucleotide sequence\n"
        },
        "cdr1region_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped cdr1 region nucleotide sequence\n"
        },
        "cdr2region_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped cdr2 region nucleotide sequence\n"
        },
        "cdr3region_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped cdr3 region nucleotide sequence\n"
        },
        "junction_sequence_nt_gapped": {
          "type": "string",
          "description": "gapped junction nucleotide sequence\n"
        },
        "vdjregion_sequence_aa": {
          "type": "string",
          "description": "vdj region amino acid sequence\n"
        },
        "vjregion_sequence_aa": {
          "type": "string",
          "description": "vj region amino acid sequence\n"
        },
        "djregion_sequence_aa": {
          "type": "string",
          "description": "dj region amino acid sequence\n"
        },
        "vregion_sequence_aa": {
          "type": "string",
          "description": "v region amino acid sequence\n"
        },
        "dregion_sequence_aa": {
          "type": "string",
          "description": "d region amino acid sequence\n"
        },
        "jregion_sequence_aa": {
          "type": "string",
          "description": "j region amino acid sequence\n"
        },
        "fr1region_sequence_aa": {
          "type": "string",
          "description": "fr1 region amino acid sequence\n"
        },
        "fr2region_sequence_aa": {
          "type": "string",
          "description": "fr2 region amino acid sequence\n"
        },
        "fr3region_sequence_aa": {
          "type": "string",
          "description": "fr3 region amino acid sequence\n"
        },
        "fr4region_sequence_aa": {
          "type": "string",
          "description": "fr4 region amino acid sequence\n"
        },
        "cdr1region_sequence_aa": {
          "type": "string",
          "description": "cdr1 region amino acid sequence\n"
        },
        "cdr2region_sequence_aa": {
          "type": "string",
          "description": "cdr2 region amino acid sequence\n"
        },
        "cdr3region_sequence_aa": {
          "type": "string",
          "description": "cdr3 region amino acid sequence\n"
        },
        "vdjregion_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped vdj region amino acid sequence\n"
        },
        "vjregion_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped vj region amino acid sequence\n"
        },
        "djregion_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped dj region amino acid sequence\n"
        },
        "vregion_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped v region amino acid sequence\n"
        },
        "dregion_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped d region amino acid sequence\n"
        },
        "jregion_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped j region amino acid sequence\n"
        },
        "fr1region_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped fr1 region amino acid sequence\n"
        },
        "fr2region_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped fr2 region amino acid sequence\n"
        },
        "fr3region_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped fr3 region amino acid sequence\n"
        },
        "fr4region_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped fr4 region amino acid sequence\n"
        },
        "cdr1region_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped cdr1 region amino acid sequence\n"
        },
        "cdr2region_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped cdr2 region amino acid sequence\n"
        },
        "cdr3region_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped cdr3 region amino acid sequence\n"
        },
        "junction_sequence_aa_gapped": {
          "type": "string",
          "description": "gapped junction amino acid sequence\n"
        },
        "vdjregion_start": {
          "type": "integer",
          "description": "e.g. 1\n"
        },
        "vdjregion_end": {
          "type": "integer",
          "description": "e.g. 321\n"
        },
        "vjregion_start": {
          "type": "integer",
          "description": "e.g. 0\n"
        },
        "vjregion_end": {
          "type": "integer",
          "description": "e.g. 0\n"
        },
        "djregion_start": {
          "type": "integer",
          "description": "e.g. 254\n"
        },
        "djregion_end": {
          "type": "integer",
          "description": "e.g. 321\n"
        },
        "vregion_start": {
          "type": "integer",
          "description": "e.g. 286\n"
        },
        "vregion_end": {
          "type": "integer",
          "description": "e.g. 252\n"
        },
        "dregion_start": {
          "type": "integer",
          "description": "e.g. 254\n"
        },
        "dregion_end": {
          "type": "integer",
          "description": "e.g. 321\n"
        },
        "jregion_start": {
          "type": "integer",
          "description": "e.g. 286\n"
        },
        "jregion_end": {
          "type": "integer",
          "description": "e.g. 321\n"
        },
        "fr1region_start": {
          "type": "integer",
          "description": "e.g. 1\n"
        },
        "fr1region_end": {
          "type": "integer",
          "description": "e.g. 38\n"
        },
        "fr2region_start": {
          "type": "integer",
          "description": "e.g. 63\n"
        },
        "fr2region_end": {
          "type": "integer",
          "description": "e.g. 113\n"
        },
        "fr3region_start": {
          "type": "integer",
          "description": "e.g. 135\n"
        },
        "fr3region_end": {
          "type": "integer",
          "description": "e.g. 248\n"
        },
        "fr4region_start": {
          "type": "integer",
          "description": "e.g. 288\n"
        },
        "fr4region_end": {
          "type": "integer",
          "description": "e.g. 321\n"
        },
        "cdr1region_start": {
          "type": "integer",
          "description": "e.g. 39\n"
        },
        "cdr1region_end": {
          "type": "integer",
          "description": "e.g. 321\n"
        },
        "cdr2region_start": {
          "type": "integer",
          "description": "e.g. 62\n"
        },
        "cdr2region_end": {
          "type": "integer",
          "description": "e.g. 134\n"
        },
        "cdr3region_start": {
          "type": "integer",
          "description": "e.g. 249\n"
        },
        "cdr3region_end": {
          "type": "integer",
          "description": "e.g. 287\n"
        },
        "junction_start": {
          "type": "integer",
          "description": "e.g. 246\n"
        },
        "junction_end": {
          "type": "integer",
          "description": "e.g. 290\n"
        },
        "vregion_mutation_string": {
          "type": "string",
          "description": "e.g. a41>c|g42>t|c43>g,P15>A(- - -)|g51>t,E17>D(+ - +)|a166>c,I56>L(+ + +)|t172>a,Y58>N(- - -)|c195>t|c198>g,N66>K(+ - -)|a220>g,S74>G(+ + -)|a229>t,T77>S(+ - +)|g275>c,S92>T(+ - +)|t279>c|\n"
        },
        "fr1region_mutation_string": {
          "type": "string",
          "description": "e.g. a41>c|g42>t|c43>g,P15>A(- - -)|g51>t,E17>D(+ - +)|\n"
        },
        "fr2region_mutation_string": {
          "type": "string",
          "description": "e.g.             \n"
        },
        "fr3region_mutation_string": {
          "type": "string",
          "description": "e.g.  c198>g,N66>K(+ - -)|a220>g,S74>G(+ + -)|a229>t,T77>S(+ - +)|g275>c,S92>T(+ - +)|t279>c|\"\n"
        },
        "cdr1region_mutation_string": {
          "type": "string",
          "description": "e.g.\n"
        },
        "cdr2region_mutation_string": {
          "type": "string",
          "description": "e.g. a166>c,I56>L(+ + +)|t172>a,Y58>N(- - -)|c195>t|\"\n"
        },
        "cdr3region_mutation_string": {
          "type": "string",
          "description": "e.g. g317>c,R106>T(- - -)|a318>c,R106>T(- - -)|g319>t\n"
        },
        "annotation_tool": {
          "type": "string",
          "description": "e.g. VQuest\n"
        }
      }
    },
    "summary_model": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "sequence_count": {
            "type": "integer",
            "description": "The number of sequences that match the filter for this sample.\n"
          },
          "study_id": {
            "type": "string",
            "description": "Alphanumeric UID assigned by NCBI (e.g. PRJNA349) (AIRR)\n"
          },
          "study_title": {
            "type": "string",
            "description": "Publication or Protocol Title (e.g. My Study) (AIRR)\n"
          },
          "study_type": {
            "type": "string",
            "description": "Type of project/study (e.g. Cancer) (AIRR)\n"
          },
          "inclusion_exclusion_criteria": {
            "type": "string",
            "description": "Study inclusion/exclusion criteria (AIRR)\n"
          },
          "grants": {
            "type": "string",
            "description": "Grant funding agency (AIRR)\n"
          },
          "lab_name": {
            "type": "string",
            "description": "Lab name (AIRR)                    \n"
          },
          "collected_by": {
            "type": "string",
            "description": "Contact information (data collection) (AIRR)\n"
          },
          "submitted_by": {
            "type": "string",
            "description": "Contact information (data deposition) (AIRR)\n"
          },
          "lab_address": {
            "type": "string",
            "description": "Lab address (AIRR)\n"
          },
          "pubs_ids": {
            "type": "string",
            "description": "Alphanumeric UID assigned by NCBI (e.g. PRJNA349) (AIRR)\n"
          },
          "subject_id": {
            "type": "string",
            "description": "UID assigned by submitter (e.g. SUB856413) (AIRR)\n"
          },
          "organism": {
            "type": "string",
            "description": "Organism-based (human, mouse) or synthetic (AIRR)\n"
          },
          "sex": {
            "type": "string",
            "description": "Sex (e.g. M/F) (AIRR)\n"
          },
          "age": {
            "type": "string",
            "description": "Age - Time duration and unit (e.g. 200 days) (AIRR)\n"
          },
          "age_event": {
            "type": "string",
            "description": "Age event (e.g. Enrollment) (AIRR)\n"
          },
          "ancestry_population": {
            "type": "string",
            "description": "Ancestry population (AIRR)\n"
          },
          "ethnicity": {
            "type": "string",
            "description": "Ethnicity (e.g. Tamil) (AIRR)\n"
          },
          "race": {
            "type": "string",
            "description": "Race (e.g. South Indian) (AIRR)\n"
          },
          "species_name": {
            "type": "string",
            "description": "Species name (e.g. Homo Sapiens) (AIRR)\n"
          },
          "strain_name": {
            "type": "string",
            "description": "Strain name (e.g. C57BL/6J) (AIRR)\n"
          },
          "linked_subjects": {
            "type": "string",
            "description": "Relation to other subjects (SubjectID e.g. SUB1355648) (AIRR)\n"
          },
          "link_type": {
            "type": "string",
            "description": "Relation type (.e.g  sister, father, daughter) (AIRR)\n"
          },
          "sample_id": {
            "type": "string",
            "description": "Biological sample ID - UID assigned by submitter (AIRR)\n"
          },
          "sample_type": {
            "type": "string",
            "description": "Sample type (e.g. Tissue, body fluid) (AIRR)\n"
          },
          "tissue": {
            "type": "string",
            "description": "Anatomic site (e.g. spleen) (AIRR)\n"
          },
          "disease_state_sample": {
            "type": "string",
            "description": "Disease state of sample (e.g. tumor vs margin) (AIRR)\n"
          },
          "collection_date": {
            "type": "string",
            "description": "Sample collection time  (e.g. 10 days) (AIRR)\n"
          },
          "collection_time_event": {
            "type": "string",
            "description": "Collection time event (T0) (e.g. vaccination, recruitment, etc) (AIRR)\n"
          },
          "source_commercial": {
            "type": "string",
            "description": "Commercial source of sample (e.g. XYZ Pharma) (AIRR)\n"
          },
          "cell_subset": {
            "type": "string",
            "description": "Cell subset (Controlled vocabulary) (AIRR)\n"
          },
          "cell_phenotype": {
            "type": "string",
            "description": "Cell subset phenotype (lab specific description) (AIRR)\n"
          },
          "study_group_description": {
            "type": "string",
            "description": "Study group description (e.g. Case vs. Control) (AIRR)\n"
          },
          "library_source": {
            "type": "string",
            "description": "Target substrate (Controlled vocabulary e.g. cDNA/gDNA/RNA) (AIRR)\n"
          },
          "subject_age": {
            "type": "integer",
            "description": "e.g. 1\n"
          },
          "marker_1": {
            "type": "string",
            "description": "e.g. CR19\n"
          },
          "marker_2": {
            "type": "string",
            "description": "e.g. CR20\n"
          },
          "marker_3": {
            "type": "string",
            "description": "e.g. CR21\n"
          },
          "marker_4": {
            "type": "string",
            "description": "e.g. null\n"
          },
          "marker_5": {
            "type": "string",
            "description": "e.g. null\n"
          },
          "marker_6": {
            "type": "string",
            "description": "e.g. null\n"
          },
          "subject_db_id": {
            "type": "integer",
            "description": "Identifier used internally by the repository to identify a subject.\n"
          },
          "project_db_id": {
            "type": "integer",
            "description": "Identifier used internally by the repository to identify a project.\n"
          },
          "project_parent_db_id": {
            "type": "integer",
            "description": "Identifier used internally by the repository to identify a parent/child relationship between this project and its parent project.\n"
          },
          "lab_db_id": {
            "type": "integer",
            "description": "Identifier used internally by the repository to identify a lab.\n"
          },
          "case_control_db_id": {
            "type": "integer",
            "description": "Identifier used internally by the repository to identify an element in the case_control table.\n"
          },
          "sample_db_id": {
            "type": "integer",
            "description": "Identifier used internally by the repository to identify a sample.\n"
          },
          "dna_db_id": {
            "type": "integer",
            "description": "Identifier used internally by the repository to identify a DNA type.\n"
          },
          "project_sample_db_id": {
            "type": "integer",
            "description": "Identifier used internally by the repository to identify an association a project with a sample.\n"
          },
          "sample_subject_db_id": {
            "type": "integer",
            "description": "Identifier used internally by the repository to identify an association between a sample and a subject.\n"
          },
          "sample_source_db_id": {
            "type": "integer",
            "description": "Identifier used internally by the repository to identify an association between a sample and a sample source.\n"
          }
        }
      }
    }
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "info",
      "description": "Service information"
    },
    {
      "name": "samples",
      "description": "Queries for samples"
    },
    {
      "name": "sequences",
      "description": "Queries for sequences"
    },
    {
      "name": "clones",
      "description": "Queries for clones"
    }
  ],
  "paths": {
    "/": {
      "x-swagger-router-controller": "status",
      "get": {
        "description": "Service heartbeat.\n",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "Success.\n",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/info": {
      "x-swagger-router-controller": "status",
      "get": {
        "description": "Service information.\n",
        "tags": [
          "info"
        ],
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "Success.\n",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/swagger": {
      "x-swagger-pipe": "swagger_raw"
    },
    "/samples": {
      "x-swagger-router-controller": "samples",
      "get": {
        "description": "This service returns metadata about samples, including higher-level meta-data around the study, subject, diagnosis, and sample processing (data relevant to MiAIRR data classes 1 through 3). The data returned is filtered based on the parameters provided.\nA successful call returns a json list with a sample level summary of each sample including a summary count of the number of sequences found for that sample.\n",
        "tags": [
          "samples"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Username of the individual requesting access to the iReceptor repository node.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "lab_id",
            "in": "query",
            "description": "e.g. 1\n",
            "required": false,
            "type": "integer"
          },
          {
            "name": "project_id",
            "in": "query",
            "description": "e.g. 1\n",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "subject_code",
            "in": "query",
            "description": "e.g. test\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject_gender",
            "in": "query",
            "description": "e.g. Male or Female\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject_species",
            "in": "query",
            "description": "e.g. Human\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject_ethnicity",
            "in": "query",
            "description": "e.g. Caucasian\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject_age_min",
            "in": "query",
            "description": "e.g. 10\n",
            "required": false,
            "type": "integer"
          },
          {
            "name": "subject_age_max",
            "in": "query",
            "description": "e.g. 12\n",
            "required": false,
            "type": "integer"
          },
          {
            "name": "case_control_name",
            "in": "query",
            "description": "e.g. Control\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sample_name",
            "in": "query",
            "description": "e.g. test2\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "sample_source_name",
            "in": "query",
            "description": "e.g. Blood (PBMC)\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "ireceptor_cell_subset_name",
            "in": "query",
            "description": "e.g. NaiveB\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "dna_type",
            "in": "query",
            "description": "e.g. cDNA, gDNA\n",
            "required": false,
            "type": "string"
          }
        ],
        "operationId": "getSamples",
        "responses": {
          "200": {
            "description": "A successful call returns an array of sample summary metadata for\neach sample that meets the search criteria. The metadata returned\nfor each sample includes the number of sequences found for that sample\nas well as the study/subject/sample data for that sample. The metadata\nfor each sample in the response contains a set of AIRR compliant data\nas well as repository specific data that is required to query the\nrepository about those types of elements. \n",
            "schema": {
              "$ref": "#/definitions/ireceptor_summary_response"
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      },
      "post": {
        "description": "This service returns metadata about samples, including higher-level meta-data around the study, subject, diagnosis, and sample processing (data relevant to MiAIRR data classes 1 through 3). The data returned is filtered based on the parameters provided.\nA successful call returns a json list with a sample level summary of each sample including a summary count of the number of sequences found for that sample.\n",
        "tags": [
          "samples"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string",
                  "description": "Username of the individual requesting access to the iReceptor repository node.\n"
                },
                "lab_id": {
                  "type": "integer",
                  "description": "e.g. 1\n"
                },
                "project_id": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "e.g. 1\n"
                },
                "subject_code": {
                  "type": "string",
                  "description": "e.g. test\n"
                },
                "subject_gender": {
                  "type": "string",
                  "description": "e.g. Male\n"
                },
                "subject_ethnicity": {
                  "type": "string",
                  "description": "e.g. Caucasian\n"
                },
                "subject_species": {
                  "type": "string",
                  "description": "e.g. Human\n"
                },
                "subject_age_min": {
                  "type": "integer",
                  "description": "e.g. 10\n"
                },
                "subject_age_max": {
                  "type": "integer",
                  "description": "e.g. 12\n"
                },
                "case_control_name": {
                  "type": "string",
                  "description": "e.g. Control\n"
                },
                "sample_name": {
                  "type": "string",
                  "description": "e.g. test2\n"
                },
                "sample_source_name": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "e.g. Blood (PBMC)\n"
                },
                "ireceptor_cell_subset_name": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "e.g. NaiveB\n"
                },
                "dna_type": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "e.g. cDNA\n"
                }
              }
            }
          }
        ],
        "operationId": "postSamples",
        "responses": {
          "200": {
            "description": "A successful call returns the metadata for each sample, including the number of sequences found for that sample.\n",
            "schema": {
              "$ref": "#/definitions/ireceptor_summary_response"
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      }
    },
    "/sequences_summary": {
      "x-swagger-router-controller": "sequences",
      "get": {
        "description": "This service returns a summary of sequences that matches the GET provided filter. \"username\" parameter refers to external_users table.\n",
        "tags": [
          "sequences"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Username of the individual requesting access to the iReceptor repository node.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_sample_id_list",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "cdr3_length",
            "in": "query",
            "description": "length of complementarity determining region in nucleotide base pairs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "vgene_string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "jgene_string",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "operationId": "getSequenceSummary",
        "responses": {
          "200": {
            "description": "A successful call returns two components, an aggregated summary of the data that satisfies the query and an example subset of the annotated sequence data that meets the query criteria. The aggreated data returns a summary similar to that returned by the /samples API entry point, returning the number of sequences and the study/subject/sample meta-data for each sample. The example subset of sequence data that is returned is a small subset of annotated sequences that met the search criteria. The number of sequences returned is given in the \"num_sequences\" paramter to the query and the format in which the sequences are returned is provided by the \"sequence_format\" parameter to the query.\n",
            "schema": {
              "type": "object",
              "properties": {
                "summary": {
                  "$ref": "#/definitions/ireceptor_summary_response"
                },
                "items": {
                  "$ref": "#/definitions/ireceptor_sequence_response"
                }
              }
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      }
    },
    "/sequences_data": {
      "x-swagger-router-controller": "sequences",
      "get": {
        "description": "This service returns the annotation data that matches the GET provided filter. \"username\" parameter refers to external_users table, and it requires the array of \"project_sample_id\", which limits which samples the sequences will be taken from. Other parameters are optional, and refer to the sequence_md_view view in iReceptor database.\n",
        "tags": [
          "sequences"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Username of the individual requesting access to the iReceptor repository node.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_sample_id_list",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "cdr3_length",
            "in": "query",
            "description": "length of complementarity determining region in nucleotide base pairs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "vgene_string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "jgene_string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "description": "'csv' - vQuest based CSV (as per /v1);  'tsv' - vQuest based TSV (as per /v1 with tab delimiters instead of commas); 'airr' - AIRR Formats rearrangements TSV (as per AIRR formats rearrangements spec)",
            "required": false,
            "type": "string"
          }
        ],
        "operationId": "getSequenceData",
        "responses": {
          "200": {
            "description": "A successful call returns an array of sequence data. Optional \"format\" parameter determines the output format. Default is a JSON response, limited to top 50 results. If \"format\" is set to \"csv\", it will return all the matching sequence annotations, in addition to sample information and annotation tool information, in a comma-separated format; \"tsv\" returns a tab-delimited outputs;  \"airr\" returns AIRR minimal standards encoded tab-delimited outputs.\n",
            "schema": {
              "$ref": "#/definitions/ireceptor_sequence_response"
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      },
      "post": {
        "description": "This service returns the annotation data that matches the POST provided filter. \"username\" parameter refers to external_users table, and it requires the array of \"project_sample_id\", which limits which samples the sequences will be taken from. Other parameters are optional, and refer to the sequence_md_view view in iReceptor database. A full list of possible parameters is in the iReceptorAPI-sequenceMetadata file\n",
        "tags": [
          "sequences"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "type": "string",
                  "description": "Username of the individual requesting access to the iReceptor repository node.\n"
                },
                "project_sample_id_list": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                "cdr3_length": {
                  "description": "length of complementarity determining region in nucleotide base pairs\n",
                  "type": "integer"
                },
                "vgene_string": {
                  "type": "string"
                },
                "jgene_string": {
                  "type": "string"
                },
                "format": {
                  "description": "'csv' - vQuest based CSV (as per /v1);  'tsv' - vQuest based TSV (as per /v1 with tab delimiters instead of commas); 'airr' - AIRR Formats rearrangements TSV (as per AIRR formats rearrangements spec)"
                }
              }
            }
          }
        ],
        "operationId": "postSequenceData",
        "responses": {
          "200": {
            "description": "A successful call returns an array of sequence data. Optional \"format\" parameter determines the output format. Default is a JSON response, limited to top 50 results. If \"format\" is set to \"csv\", it will return all the matching sequence annotations, in addition to sample information and annotation tool information, in a comma-separated format; \"tsv\" returns a tab-delimited outputs;  \"airr\" returns AIRR minimal standards encoded tab-delimited outputs.\n",
            "schema": {
              "$ref": "#/definitions/ireceptor_sequence_response"
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      }
    },
    "/clones_summary": {
      "x-swagger-router-controller": "clones",
      "get": {
        "description": "This service returns a summary of sequence clones that match the GET provided filter. \"username\" parameter refers to external_users table.\n",
        "tags": [
          "clones"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Username of the individual requesting access to the iReceptor repository node.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_sample_id_list",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "cdr3_length",
            "in": "query",
            "description": "length of complementarity determining region in nucleotide base pairs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "vgene_string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "jgene_string",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "operationId": "getCloneSummary",
        "responses": {
          "200": {
            "description": "A successful call returns an summary of clone data as an array of 'category' = count pairs in which the 'category' are string tags of parameters of interest from a controlled vocabulary term set.\n",
            "schema": {
              "type": "object",
              "properties": {
                "summary": {
                  "$ref": "#/definitions/ireceptor_summary_response"
                },
                "items": {
                  "$ref": "#/definitions/ireceptor_sequence_response"
                }
              }
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      }
    },
    "/clones_data": {
      "x-swagger-router-controller": "clones",
      "get": {
        "description": "This service returns a list of clones that matches the GET provided filter. \"username\" parameter refers to external_users table.\n",
        "tags": [
          "clones"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Username of the individual requesting access to the iReceptor repository node.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "project_sample_id_list",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          {
            "name": "cdr3_length",
            "in": "query",
            "description": "length of complementarity determining region in nucleotide base pairs",
            "required": false,
            "type": "integer"
          },
          {
            "name": "vgene_string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "jgene_string",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "operationId": "getCloneData",
        "responses": {
          "200": {
            "description": "A successful call returns an array of sequence data. Optional \"output\" parameter determines the output format. Default is a JSON response, limited to top 50 results. If \"output\" is set to \"csv\", it will return all the matching sequence annotations, in addition to sample information and annotation tool information, in a comma-separated format. \n",
            "schema": {
              "$ref": "#/definitions/ireceptor_sequence_response"
            },
            "examples": {
              "application/json": {
                "seq_name": "M00930:18:000000000-A3782:1:1101:11543:3128_1:N:0\n",
                "v_allele": "IGHV4-59*01 or  IGHV4-59*07\n",
                "d_allele": "IGHD3-10*01\n",
                "j_allele": "IGHJ4*02\n",
                "citation": {
                  "doi": "10.1093/cid/ciw767",
                  "title": "RNA-Seq Analysis of Gene Expression, Viral Pathogen, and B-Cell/T-Cell Receptor Signatures in Complex Chronic Disease.\n"
                }
              }
            }
          },
          "400": {
            "description": "malformed request"
          },
          "401": {
            "description": "authentication error"
          },
          "403": {
            "description": "authorization error"
          },
          "404": {
            "description": "data not found"
          },
          "405": {
            "description": "method not allowed"
          }
        }
      }
    }
  }
}